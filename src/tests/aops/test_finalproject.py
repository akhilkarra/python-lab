from typing import Dict, Tuple

import pytest

from src.aops.finalproject import (
    check_diagonals,
    check_horizontals,
    check_verticals,
    create_board,
    drop_checkers,
)


# Test create_board with the expected board
@pytest.mark.parametrize(
    "expected",
    [
        {
            (0, 0): ".",
            (0, 1): ".",
            (0, 2): ".",
            (0, 3): ".",
            (0, 4): ".",
            (0, 5): ".",
            (0, 6): ".",
            (1, 0): ".",
            (1, 1): ".",
            (1, 2): ".",
            (1, 3): ".",
            (1, 4): ".",
            (1, 5): ".",
            (1, 6): ".",
            (2, 0): ".",
            (2, 1): ".",
            (2, 2): ".",
            (2, 3): ".",
            (2, 4): ".",
            (2, 5): ".",
            (2, 6): ".",
            (3, 0): ".",
            (3, 1): ".",
            (3, 2): ".",
            (3, 3): ".",
            (3, 4): ".",
            (3, 5): ".",
            (3, 6): ".",
            (4, 0): ".",
            (4, 1): ".",
            (4, 2): ".",
            (4, 3): ".",
            (4, 4): ".",
            (4, 5): ".",
            (4, 6): ".",
            (5, 0): ".",
            (5, 1): ".",
            (5, 2): ".",
            (5, 3): ".",
            (5, 4): ".",
            (5, 5): ".",
            (5, 6): ".",
            (6, 0): ".",
            (6, 1): ".",
            (6, 2): ".",
            (6, 3): ".",
            (6, 4): ".",
            (6, 5): ".",
            (6, 6): ".",
        }
    ],
)
def test_create_board(expected: Dict[Tuple[int, int], str]) -> None:
    assert create_board() == expected


# Test drop_checkers with an example board
@pytest.mark.parametrize(
    "board, column, checker, expected",
    [
        [
            {
                (0, 0): ".",
                (0, 1): ".",
                (0, 2): ".",
                (0, 3): ".",
                (0, 4): ".",
                (0, 5): ".",
                (0, 6): ".",
                (1, 0): "X",
                (1, 1): "X",
                (1, 2): "X",
                (1, 3): "O",
                (1, 4): ".",
                (1, 5): ".",
                (1, 6): ".",
                (2, 0): ".",
                (2, 1): ".",
                (2, 2): ".",
                (2, 3): ".",
                (2, 4): ".",
                (2, 5): ".",
                (2, 6): ".",
                (3, 0): ".",
                (3, 1): ".",
                (3, 2): ".",
                (3, 3): ".",
                (3, 4): ".",
                (3, 5): ".",
                (3, 6): ".",
                (4, 0): ".",
                (4, 1): ".",
                (4, 2): ".",
                (4, 3): ".",
                (4, 4): ".",
                (4, 5): ".",
                (4, 6): ".",
                (5, 0): ".",
                (5, 1): ".",
                (5, 2): ".",
                (5, 3): ".",
                (5, 4): ".",
                (5, 5): ".",
                (5, 6): ".",
                (6, 0): ".",
                (6, 1): ".",
                (6, 2): ".",
                (6, 3): ".",
                (6, 4): ".",
                (6, 5): ".",
                (6, 6): ".",
            },
            1,
            "O",
            {
                (0, 0): ".",
                (0, 1): ".",
                (0, 2): ".",
                (0, 3): ".",
                (0, 4): ".",
                (0, 5): ".",
                (0, 6): ".",
                (1, 0): "X",
                (1, 1): "X",
                (1, 2): "X",
                (1, 3): "O",
                (1, 4): "O",
                (1, 5): ".",
                (1, 6): ".",
                (2, 0): ".",
                (2, 1): ".",
                (2, 2): ".",
                (2, 3): ".",
                (2, 4): ".",
                (2, 5): ".",
                (2, 6): ".",
                (3, 0): ".",
                (3, 1): ".",
                (3, 2): ".",
                (3, 3): ".",
                (3, 4): ".",
                (3, 5): ".",
                (3, 6): ".",
                (4, 0): ".",
                (4, 1): ".",
                (4, 2): ".",
                (4, 3): ".",
                (4, 4): ".",
                (4, 5): ".",
                (4, 6): ".",
                (5, 0): ".",
                (5, 1): ".",
                (5, 2): ".",
                (5, 3): ".",
                (5, 4): ".",
                (5, 5): ".",
                (5, 6): ".",
                (6, 0): ".",
                (6, 1): ".",
                (6, 2): ".",
                (6, 3): ".",
                (6, 4): ".",
                (6, 5): ".",
                (6, 6): ".",
            },
        ],
    ],
)
def test_drop_checkers(
    board: Dict[Tuple[int, int], str],
    column: int,
    checker: str,
    expected: Dict[Tuple[int, int], str],
) -> None:
    assert drop_checkers(board, column, checker) == expected


# Test check_horizontal with an example board
@pytest.mark.parametrize(
    "board, expected",
    [
        [
            {
                (0, 0): ".",
                (0, 1): ".",
                (0, 2): ".",
                (0, 3): ".",
                (0, 4): ".",
                (0, 5): ".",
                (0, 6): ".",
                (1, 0): "X",
                (1, 1): "X",
                (1, 2): "X",
                (1, 3): "O",
                (1, 4): ".",
                (1, 5): ".",
                (1, 6): ".",
                (2, 0): "X",
                (2, 1): "X",
                (2, 2): ".",
                (2, 3): ".",
                (2, 4): ".",
                (2, 5): ".",
                (2, 6): ".",
                (3, 0): "O",
                (3, 1): "X",
                (3, 2): ".",
                (3, 3): ".",
                (3, 4): ".",
                (3, 5): ".",
                (3, 6): ".",
                (4, 0): "O",
                (4, 1): "X",
                (4, 2): ".",
                (4, 3): ".",
                (4, 4): ".",
                (4, 5): ".",
                (4, 6): ".",
                (5, 0): ".",
                (5, 1): ".",
                (5, 2): ".",
                (5, 3): ".",
                (5, 4): ".",
                (5, 5): ".",
                (5, 6): ".",
                (6, 0): ".",
                (6, 1): ".",
                (6, 2): ".",
                (6, 3): ".",
                (6, 4): ".",
                (6, 5): ".",
                (6, 6): ".",
            },
            (True, "X"),
        ],
        [
            {
                (0, 0): ".",
                (0, 1): ".",
                (0, 2): ".",
                (0, 3): ".",
                (0, 4): ".",
                (0, 5): ".",
                (0, 6): ".",
                (1, 0): "X",
                (1, 1): "X",
                (1, 2): "X",
                (1, 3): "O",
                (1, 4): ".",
                (1, 5): ".",
                (1, 6): ".",
                (2, 0): ".",
                (2, 1): ".",
                (2, 2): ".",
                (2, 3): ".",
                (2, 4): ".",
                (2, 5): ".",
                (2, 6): ".",
                (3, 0): ".",
                (3, 1): ".",
                (3, 2): ".",
                (3, 3): ".",
                (3, 4): ".",
                (3, 5): ".",
                (3, 6): ".",
                (4, 0): ".",
                (4, 1): ".",
                (4, 2): ".",
                (4, 3): ".",
                (4, 4): ".",
                (4, 5): ".",
                (4, 6): ".",
                (5, 0): ".",
                (5, 1): ".",
                (5, 2): ".",
                (5, 3): ".",
                (5, 4): ".",
                (5, 5): ".",
                (5, 6): ".",
                (6, 0): ".",
                (6, 1): ".",
                (6, 2): ".",
                (6, 3): ".",
                (6, 4): ".",
                (6, 5): ".",
                (6, 6): ".",
            },
            (False, ""),
        ],
    ],
)
def test_check_horizontals(
    board: Dict[Tuple[int, int], str], expected: Tuple[bool, str]
) -> None:
    assert check_horizontals(board) == expected


# Test check_verticals with an example board
@pytest.mark.parametrize(
    "board, expected",
    [
        [
            {
                (0, 0): ".",
                (0, 1): ".",
                (0, 2): ".",
                (0, 3): ".",
                (0, 4): ".",
                (0, 5): ".",
                (0, 6): ".",
                (1, 0): "X",
                (1, 1): "X",
                (1, 2): "X",
                (1, 3): "X",
                (1, 4): "O",
                (1, 5): ".",
                (1, 6): ".",
                (2, 0): "X",
                (2, 1): "X",
                (2, 2): ".",
                (2, 3): ".",
                (2, 4): ".",
                (2, 5): ".",
                (2, 6): ".",
                (3, 0): "O",
                (3, 1): "X",
                (3, 2): ".",
                (3, 3): ".",
                (3, 4): ".",
                (3, 5): ".",
                (3, 6): ".",
                (4, 0): "O",
                (4, 1): "X",
                (4, 2): ".",
                (4, 3): ".",
                (4, 4): ".",
                (4, 5): ".",
                (4, 6): ".",
                (5, 0): ".",
                (5, 1): ".",
                (5, 2): ".",
                (5, 3): ".",
                (5, 4): ".",
                (5, 5): ".",
                (5, 6): ".",
                (6, 0): ".",
                (6, 1): ".",
                (6, 2): ".",
                (6, 3): ".",
                (6, 4): ".",
                (6, 5): ".",
                (6, 6): ".",
            },
            (True, "X"),
        ],
        [
            {
                (0, 0): ".",
                (0, 1): ".",
                (0, 2): ".",
                (0, 3): ".",
                (0, 4): ".",
                (0, 5): ".",
                (0, 6): ".",
                (1, 0): "X",
                (1, 1): "X",
                (1, 2): "X",
                (1, 3): "O",
                (1, 4): ".",
                (1, 5): ".",
                (1, 6): ".",
                (2, 0): ".",
                (2, 1): ".",
                (2, 2): ".",
                (2, 3): ".",
                (2, 4): ".",
                (2, 5): ".",
                (2, 6): ".",
                (3, 0): ".",
                (3, 1): ".",
                (3, 2): ".",
                (3, 3): ".",
                (3, 4): ".",
                (3, 5): ".",
                (3, 6): ".",
                (4, 0): ".",
                (4, 1): ".",
                (4, 2): ".",
                (4, 3): ".",
                (4, 4): ".",
                (4, 5): ".",
                (4, 6): ".",
                (5, 0): ".",
                (5, 1): ".",
                (5, 2): ".",
                (5, 3): ".",
                (5, 4): ".",
                (5, 5): ".",
                (5, 6): ".",
                (6, 0): ".",
                (6, 1): ".",
                (6, 2): ".",
                (6, 3): ".",
                (6, 4): ".",
                (6, 5): ".",
                (6, 6): ".",
            },
            (False, ""),
        ],
    ],
)
def test_check_verticals(
    board: Dict[Tuple[int, int], str], expected: Tuple[bool, str]
) -> None:
    assert check_verticals(board) == expected


# Test check_diagonals with an example board
@pytest.mark.parametrize(
    "board, expected",
    [
        [
            {
                (0, 0): ".",
                (0, 1): ".",
                (0, 2): ".",
                (0, 3): ".",
                (0, 4): ".",
                (0, 5): ".",
                (0, 6): ".",
                (1, 0): "X",
                (1, 1): "X",
                (1, 2): "X",
                (1, 3): "O",
                (1, 4): ".",
                (1, 5): ".",
                (1, 6): ".",
                (2, 0): "X",
                (2, 1): "X",
                (2, 2): "O",
                (2, 3): "X",
                (2, 4): ".",
                (2, 5): ".",
                (2, 6): ".",
                (3, 0): "O",
                (3, 1): "O",
                (3, 2): ".",
                (3, 3): ".",
                (3, 4): ".",
                (3, 5): ".",
                (3, 6): ".",
                (4, 0): "O",
                (4, 1): "X",
                (4, 2): ".",
                (4, 3): ".",
                (4, 4): ".",
                (4, 5): ".",
                (4, 6): ".",
                (5, 0): ".",
                (5, 1): ".",
                (5, 2): ".",
                (5, 3): ".",
                (5, 4): ".",
                (5, 5): ".",
                (5, 6): ".",
                (6, 0): ".",
                (6, 1): ".",
                (6, 2): ".",
                (6, 3): ".",
                (6, 4): ".",
                (6, 5): ".",
                (6, 6): ".",
            },
            (True, "O"),
        ],
        [
            {
                (0, 0): ".",
                (0, 1): ".",
                (0, 2): ".",
                (0, 3): ".",
                (0, 4): ".",
                (0, 5): ".",
                (0, 6): ".",
                (1, 0): "X",
                (1, 1): "X",
                (1, 2): "X",
                (1, 3): "O",
                (1, 4): ".",
                (1, 5): ".",
                (1, 6): ".",
                (2, 0): ".",
                (2, 1): ".",
                (2, 2): ".",
                (2, 3): ".",
                (2, 4): ".",
                (2, 5): ".",
                (2, 6): ".",
                (3, 0): ".",
                (3, 1): ".",
                (3, 2): ".",
                (3, 3): ".",
                (3, 4): ".",
                (3, 5): ".",
                (3, 6): ".",
                (4, 0): ".",
                (4, 1): ".",
                (4, 2): ".",
                (4, 3): ".",
                (4, 4): ".",
                (4, 5): ".",
                (4, 6): ".",
                (5, 0): ".",
                (5, 1): ".",
                (5, 2): ".",
                (5, 3): ".",
                (5, 4): ".",
                (5, 5): ".",
                (5, 6): ".",
                (6, 0): ".",
                (6, 1): ".",
                (6, 2): ".",
                (6, 3): ".",
                (6, 4): ".",
                (6, 5): ".",
                (6, 6): ".",
            },
            (False, ""),
        ],
    ],
)
def test_check_diagonals(
    board: Dict[Tuple[int, int], str], expected: Tuple[bool, str]
) -> None:
    assert check_diagonals(board) == expected
